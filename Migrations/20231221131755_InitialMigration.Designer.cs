// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RaceTrackingAPI.DAL;

#nullable disable

namespace RaceTrackingAPI.Migrations
{
    [DbContext(typeof(MainDbContext))]
    [Migration("20231221131755_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RaceTrackingAPI.DAL.Car", b =>
                {
                    b.Property<int>("IdCar")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCar"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("text");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IdCar");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("RaceTrackingAPI.DAL.CarInRace", b =>
                {
                    b.Property<int>("IdCar")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<int>("IdRace")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<bool>("IsConfirmedByDriver")
                        .HasColumnType("bit");

                    b.HasKey("IdCar", "IdRace");

                    b.HasIndex("IdRace");

                    b.ToTable("CarsInRaces");
                });

            modelBuilder.Entity("RaceTrackingAPI.DAL.Part", b =>
                {
                    b.Property<int>("IdPart")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPart"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IdPart");

                    b.ToTable("Parts");
                });

            modelBuilder.Entity("RaceTrackingAPI.DAL.PartInCar", b =>
                {
                    b.Property<int>("IdPart")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<int>("IdCar")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("LastServiceDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("MountedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("IdPart", "IdCar");

                    b.HasIndex("IdCar");

                    b.ToTable("PartInCars");
                });

            modelBuilder.Entity("RaceTrackingAPI.DAL.Race", b =>
                {
                    b.Property<int>("IdRace")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdRace"));

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Difficulty")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("TrackName")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("IdRace");

                    b.ToTable("Races");
                });

            modelBuilder.Entity("RaceTrackingAPI.DAL.CarInRace", b =>
                {
                    b.HasOne("RaceTrackingAPI.DAL.Car", "Car")
                        .WithMany("CarInRaces")
                        .HasForeignKey("IdCar")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RaceTrackingAPI.DAL.Race", "Race")
                        .WithMany("CarInRaces")
                        .HasForeignKey("IdRace")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("Race");
                });

            modelBuilder.Entity("RaceTrackingAPI.DAL.PartInCar", b =>
                {
                    b.HasOne("RaceTrackingAPI.DAL.Car", "Car")
                        .WithMany("PartInCars")
                        .HasForeignKey("IdCar")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RaceTrackingAPI.DAL.Part", "Part")
                        .WithMany("PartInCars")
                        .HasForeignKey("IdPart")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("Part");
                });

            modelBuilder.Entity("RaceTrackingAPI.DAL.Car", b =>
                {
                    b.Navigation("CarInRaces");

                    b.Navigation("PartInCars");
                });

            modelBuilder.Entity("RaceTrackingAPI.DAL.Part", b =>
                {
                    b.Navigation("PartInCars");
                });

            modelBuilder.Entity("RaceTrackingAPI.DAL.Race", b =>
                {
                    b.Navigation("CarInRaces");
                });
#pragma warning restore 612, 618
        }
    }
}
